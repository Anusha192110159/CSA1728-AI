import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # cost from start node to current node
        self.h = h  # heuristic cost from current node to goal node

    def __lt__(self, other):
        return (self.g + self.h) < (other.g + other.h)

def astar(initial_state, goal_state, get_neighbors, heuristic):
    open_set = []
    closed_set = set()

    start_node = Node(initial_state)
    heapq.heappush(open_set, start_node)

    while open_set:
        current_node = heapq.heappop(open_set)

        if current_node.state == goal_state:
            path = []
            while current_node:
                path.insert(0, current_node.state)
                current_node = current_node.parent
            return path

        closed_set.add(current_node.state)

        neighbors = get_neighbors(current_node.state)
        for neighbor_state in neighbors:
            if neighbor_state in closed_set:
                continue

            g = current_node.g + 1
            h = heuristic(neighbor_state, goal_state)
            neighbor_node = Node(neighbor_state, current_node, g, h)

            if neighbor_node not in open_set:
                heapq.heappush(open_set, neighbor_node)
            elif g < neighbor_node.g:
                neighbor_node.g = g
                neighbor_node.parent = current_node
                heapq.heappush(open_set, neighbor_node)

    return None  # No path found

# Example usage:
def get_neighbors(state):
    # Define how to get neighbors for a given state
    # This is a simple example for a 2D grid, where neighbors are up, down, left, and right cells
    x, y = state
    neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]
    return [(nx, ny) for nx, ny in neighbors if 0 <= nx < 5 and 0 <= ny < 5]  # Assuming a 5x5 grid

def heuristic(state, goal_state):
    # Define the heuristic function (e.g., Manhattan distance)
    return abs(state[0] - goal_state[0]) + abs(state[1] - goal_state[1])

initial_state = (0, 0)
goal_state = (4, 4)
path = astar(initial_state, goal_state, get_neighbors, heuristic)

if path:
    print("A* Path found:", path)
else:
    print("No path found.")
